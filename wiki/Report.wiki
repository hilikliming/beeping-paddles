#summary Project final report.

=Report: Beeping Paddles=

<pre>
Jack Hall, Reuben Smith
ECE 287 C, Miami University
Fall Semester, 2011
</pre>

==Description==

TODO (Describe project, goals, system)

==Modules==

The Beeping Paddles system is composed of three fundamental modules that are utilized in the game logic of the top-level module. The three modules are Audio, Controller Input, and Video. Each of these modules is configured to provide input or produce an output based on the state of the game logic.

The first of these modules, Audio, is used in scenarios where the game logic requires output of some audio tone. The audio module is sent a specific frequency, length of playtime, and valid signal at the appropriate points in game logic (ball collisions with various objects). 

The second of these modules, Controller input, is the module that handles data input from the players. This module polls for the state of the players’ SNES controllers and stores the states of the latest poll to registers which are checked by the game logic to determine various factors of gameplay including velocity and position of both the paddles and the ball.


===System Module===

TODO

===Audio Module===

The audio module for Beeping Paddles was developed around John Loomis’ third audio project, implementing a sine lookup table for varying frequencies of output at constant amplitude. The module produces tones of specific frequency for set increments of an eighth of a second, of which both parameters are determined by registers in the top-level module. This audio module requires a valid signal to initiate the tone output and is triggered by several cases of ball collision in the top-level module.
John Loomis’ base code can be found [http://johnloomis.org/digitallab/audio/audio3/audio3.html here].


===Input Module===

The input of the Beeping Paddles system was handled by a polling module which interacted with Nintendo SNES controllers via GPIO connections. The SNES controller transmits its state data in a serialized manner based on a very specific protocol. Every 16.67 ms, or at a rate of 60 Hz, the DE2 sends a 12 µs latch signal to the latch pin. This latch signal tells the controller to latch the current states of all buttons. Then, 6 µs later, the DE2 sends 16 high pulses on the Pulse/clock pin, each 6 µs long with 6 µs low in between (or a 12 µs, 50% duty, cycle). The data is fed in the following order: B, Y, Select, Start, Up, Down, Left, Right, A, X, Left bumper, Right Bumper. This data from the controller is stored to register until the next update is cued by the 60 Hz polling clock. The following timing diagram shows the first 5 buttons in the polling cycle of the SNES controller:

http://farm8.staticflickr.com/7155/6468646417_7605c636ed.jpg

This interface was very intuitive for game play and leaves many doors open for further improvement of the game. The basic structure of the finite state machine was adapted from the following [http://web.mit.edu/6.111/www/s2004/PROJECTS/2/nes.htm link].

===Video Module===

TODO

==Result==

TODO (Discuss final project outcome, show pictures, video, etc)

<wiki:video url="http://www.youtube.com/watch?v=tSXddswz4NI" />
<wiki:video url="http://www.youtube.com/watch?v=H7dFf2XpHOQ" />